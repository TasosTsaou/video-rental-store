#-----------------------------------------------------------------------------#
# this profile will be used by tests unless you set an other active profile
# through a VM option
#-----------------------------------------------------------------------------#

#-----------------------------------------------------------------------------#
# Spring Configuration
#-----------------------------------------------------------------------------#

#spring.profiles: test


#spring.profiles.default = test
spring.profiles.active = test



#-----------------------------------------------------------------------------#
# Video Rental Store Server Configuration
#-----------------------------------------------------------------------------#
# VRS server port
server.port = 9081

#-----------------------------------------------------------------------------#
# Database Configuration
#-----------------------------------------------------------------------------#

# DataSource settings: set here configurations for the database connection
spring.datasource.url = jdbc:h2:mem:video-rental-store
spring.datasource.username = sa
spring.datasource.password =
spring.datasource.driverClassName = org.h2.Driver


# Specify the DBMS
spring.jpa.database = MYSQL

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate settings are prefixed with spring.jpa.hibernate.*
spring.jpa.hibernate.format_sql = true
spring.jpa.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#spring.datasource.url=jdbc:h2:mem:TEST;MVCC=true;DB_CLOSE_DELAY=-1;MODE=Oracle
#spring.datasource.username=sa
#spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.platform=h2

spring.datasource.initialize=true
# the schema sql script to load. By default it is schema-${platform}.sql then schema.sql
#datasource.schema=
# the data sql script. By default, it is data-${platform}.sql then data.sql
#datasource.data
# allow us to access the memory database from a web interface
spring.h2.console.enabled=true
# hibernates also tries to initialize the database. When it detects an embedded database, it sets ddl-auto to create-drop
# and initialize the database with entities annotated with @Table (and also looks for imports.sql).
#This may lead to creating the same table twice.
spring.jpa.hibernate.ddl-auto=none